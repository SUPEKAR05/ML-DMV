import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Import the dataset
df = pd.read_csv("Real estate.csv")

# Step 2: Clean column names
df.columns = df.columns.str.replace(' ', '_').str.replace(r'[^A-Za-z0-9_]', '', regex=True)


# Step 3: Handle missing values
print("Missing values per column:\n", df.isnull().sum())
for column in df.columns:
    if df[column].dtype == 'object':
        df[column].fillna(df[column].mode()[0], inplace=True)
    else:
        df[column].fillna(df[column].median(), inplace=True)



# Step 4: Aggregate data to calculate average sale prices by transaction number
average_price_by_transaction = df.groupby('No')['Y_house_price_of_unit_area'].mean().reset_index()
average_price_by_transaction.rename(columns={'Y_house_price_of_unit_area': 'Average_Sale_Price'}, inplace=True)


# Step 5: Identify and handle outliers in 'Y_house_price_of_unit_area'
Q1 = df['Y_house_price_of_unit_area'].quantile(0.25)
Q3 = df['Y_house_price_of_unit_area'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
df = df[(df['Y_house_price_of_unit_area'] >= lower_bound) & (df['Y_house_price_of_unit_area'] <= upper_bound)]



# Step 6: Visualize the average sale prices
plt.figure(figsize=(12, 6))
sns.barplot(x='Average_Sale_Price', y='No', data=average_price_by_transaction.sort_values('Average_Sale_Price', ascending=False), palette='viridis')
plt.title("Average Sale Prices by Transaction Number", fontsize=16)
plt.xlabel("Average Sale Price (Unit Area)", fontsize=14)
plt.ylabel("Transaction Number", fontsize=14)
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.show()


# Step 7: Additional visualizations
# 1. Distribution of Sale Prices
plt.figure(figsize=(10, 6))
sns.histplot(df['Y_house_price_of_unit_area'], bins=30, kde=True, color='blue')
plt.title("Distribution of Sale Prices", fontsize=16)
plt.xlabel("Sale Price (Unit Area)", fontsize=14)
plt.ylabel("Frequency", fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()


# 2. Scatter plot of House Age vs Sale Price
plt.figure(figsize=(10, 6))
sns.scatterplot(x='X2_house_age', y='Y_house_price_of_unit_area', data=df, alpha=0.6, color='orange')
plt.title("Scatter Plot of House Age vs Sale Price", fontsize=16)
plt.xlabel("House Age", fontsize=14)
plt.ylabel("Sale Price (Unit Area)", fontsize=14)
plt.grid()
plt.show()

# 3. Correlation heatmap
plt.figure(figsize=(10, 8))
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm', square=True)
plt.title("Correlation Heatmap", fontsize=16)
plt.show()

# Step 8: Export the cleaned dataset for future analysis
df.to_csv("Cleaned_RealEstate_Prices.csv", index=False)
print("Cleaned dataset exported as 'Cleaned_RealEstate_Prices.csv'.")s